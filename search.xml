<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World!</title>
    <url>/2024/05/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2024/05/07/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>测试</p>
<span id="more"></span>

<p>x</p>
<p>x</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeselector-manager</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;example.com&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;nodeselectors&quot;</span>, <span class="string">&quot;nodeselectors/status&quot;</span>, <span class="string">&quot;receiverpodstatuses&quot;</span>, <span class="string">&quot;receiverpodstatuses/status&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nodeselector-manager-binding</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span>  <span class="comment"># 根据需要更改为特定的服务账户名称</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span>  <span class="comment"># 根据需要更改为服务账户所在的命名空间</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring容器和注解</title>
    <url>/2024/05/08/newcoder%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86Spring%E5%AE%B9%E5%99%A8%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<p>官方文档<a href="https://springdoc.cn/spring/core.htm">https://springdoc.cn/spring/core.htm</a></p>
<span id="more"></span>

<h2 id="Bean和容器"><a href="#Bean和容器" class="headerlink" title="Bean和容器"></a>Bean和容器</h2><p>在spring中，构成程序的骨干和被容器管理的对象称为Bean。</p>
<p><code>org.springframework.context.ApplicationContext</code> 接口代表Spring IoC容器，负责实例化、配置和组装bean。</p>
<p>容器获取Bean的方式有</p>
<ul>
<li>通过类型获取<code>AlphaDao alphaDao = applicationContext.getBean(AlphaDao.class);</code></li>
<li>通过名字获取<code>AlphaDao alphaDao = (AlphaDao) applicationContext.getBean(&quot;alphaHibernate&quot;);</code></li>
</ul>
<p>可以通过<code>XML</code>和注解将Bean实例初始化到容器中。</p>
<h3 id="Primary-注解"><a href="#Primary-注解" class="headerlink" title="@Primary 注解"></a><code>@Primary</code> 注解</h3><p><code>@Primary</code> 表示，当多个Bean是自动注入到一个单值（single value）依赖的候选者时，应该优先考虑一个特定的Bean。如果在候选者中正好有一个主要（primary）Bean存在，它就会成为自动注入的值。</p>
<h3 id="和生命周期有关的注解"><a href="#和生命周期有关的注解" class="headerlink" title="和生命周期有关的注解"></a>和生命周期有关的注解</h3><p><code>@PostConstruct</code> 在构造函数调用后执行</p>
<p><code> @PreDestroy</code>  在销毁前执行</p>
<h3 id="Scope注解"><a href="#Scope注解" class="headerlink" title="@Scope注解"></a><code>@Scope</code>注解</h3><ul>
<li>能够管理Bean的作用域</li>
<li>默认情况下是单例  <code>@Scope(&quot;singleton&quot;)</code></li>
<li>可以变为任何数量的实例  <code>@Scope(&quot;prototype&quot;)</code></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanManage</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">AlphaService</span> <span class="variable">alphaService</span> <span class="operator">=</span> applicationContext.getBean(AlphaService.class);</span><br><span class="line">	System.out.println(alphaService);</span><br><span class="line"></span><br><span class="line">	alphaService = applicationContext.getBean(AlphaService.class);</span><br><span class="line">	System.out.println(alphaService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Configuration注解"><a href="#Configuration注解" class="headerlink" title="@Configuration注解"></a><code>@Configuration</code>注解</h3><p>被<code>@Configuration</code>标记的类中的<code>@Bean</code>的方法会被Spring容器统一管理</p>
<h3 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a><code>@Autowired</code>注解</h3><p>手动获取<code>Bean</code>的方式，用<code>ApplicationContext</code></p>
<p>使用<code>@Autowired</code>可以自动注入<code>bean</code></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AlphaDao alphaDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AlphaService alphaService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SimpleDateFormat simpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDI</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(alphaDao);</span><br><span class="line">    System.out.println(alphaService);</span><br><span class="line">    System.out.println(simpleDateFormat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Qualifier注解"><a href="#Qualifier注解" class="headerlink" title="@Qualifier注解"></a><code>@Qualifier</code>注解</h3><p>缩小注入<code>Bean</code>的类型匹配的范围</p>
<h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a><code>@RequestMapping</code>注解</h3><p>用于映射HTTP请求方式</p>
<ol>
<li><p><code>Get</code>请求获取参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有GET方法能请求到</span></span><br><span class="line">   <span class="comment">// /students?current=1&amp;limit=20</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/students&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getStudents</span><span class="params">(</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam(name = &quot;current&quot;, required = false, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> current,</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam(name = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;)</span> <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">       System.out.println(current);</span><br><span class="line">       System.out.println(limit);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;some students&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// /student/123, 获取参数的方式</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/student/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getStudent</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot;)</span><span class="type">int</span> id)</span> &#123;</span><br><span class="line">       System.out.println(id);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;a student&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p><code>Post</code>请求获取参数</p>
<p>场景：路径的长度是有限的，无法在路径中获取很多的参数，因此使用<code>POST</code>请求接收数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveStudent</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="ResponseBody注解"><a href="#ResponseBody注解" class="headerlink" title="@ResponseBody注解"></a><code>@ResponseBody</code>注解</h3><p>将方法的返回值直接作为HTTP响应的内容返回</p>
<p>不加这个注解，默认返回<code>HTML</code>数据</p>
<h3 id="RequestParam注解"><a href="#RequestParam注解" class="headerlink" title="@RequestParam注解"></a><code>@RequestParam</code>注解</h3><p>用于获取 HTTP 请求中的请求参数，从请求的查询参数中获取参数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/students&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStudents</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(name = &quot;current&quot;, required = false, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> current,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(name = &quot;limit&quot;, required = false, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;some students&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将<code>request</code>中名为<code>current</code>的参数赋值给函数中的<code>current</code>参数，<code>required = false</code>表示<code>request</code>中可以没有这个参数，<code>defaultValue</code>表示请求中没有这个参数时默认值为1。</p>
<h3 id="PathVariable注解"><a href="#PathVariable注解" class="headerlink" title="@PathVariable注解"></a><code>@PathVariable</code>注解</h3><p>用于获取 URL 中的路径变量的值，从请求的URL路径中获取参数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /student/123, 获取参数的方式</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStudent</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot;)</span><span class="type">int</span> id)</span> &#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a student&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Component-注解"><a href="#Component-注解" class="headerlink" title="@Component 注解"></a><code>@Component</code> 注解</h3><p><code>@Component</code> 注解应用于类上，以指示该类是一个spring所管理的组件。</p>
<h3 id="Value-注解"><a href="#Value-注解" class="headerlink" title="@Value 注解"></a><code>@Value</code> 注解</h3><p><code>@Value</code> 注解用于将配置属性的值注入到Spring管理的Bean的字段中</p>
<h3 id="Options注解"><a href="#Options注解" class="headerlink" title="@Options注解"></a><code>@Options</code>注解</h3><p>数据库相关配置</p>
<p><code>@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</code>：表示主键自生成</p>
<h2 id="Java项目中的三层"><a href="#Java项目中的三层" class="headerlink" title="Java项目中的三层"></a>Java项目中的三层</h2><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a><code>Controller</code></h3><p>”业务控制层“</p>
<p>处理浏览器的请求，调用业务组件<code>Service</code></p>
<p>控制器层负责处理客户端发起的HTTP请求，并将请求转发给业务逻辑处理层（Service层）进行处理。</p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a><code>Service</code></h3><p>”业务服务层“</p>
<p>业务逻辑层通常包含一组Service类，每个Service类对应系统中的一个业务模块，负责实现该模块的具体业务逻辑。</p>
<h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a><code>Dao</code></h3><p>”数据库持久层“</p>
<p>数据访问层负责与数据库进行交互，执行数据库操作（增删改查），并将数据传递给业务逻辑层进行处理。</p>
<h2 id="Spring中的常用配置"><a href="#Spring中的常用配置" class="headerlink" title="Spring中的常用配置"></a>Spring中的常用配置</h2><p>查找：<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#common-application-properties">Spring Boot Reference Guide</a></p>
<p>将需要的配置写入<code>application.properties</code>中</p>
]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>newcoder项目前置知识之SpringMVC</title>
    <url>/2024/05/08/newcoder%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E4%B9%8BSpringMVC/</url>
    <content><![CDATA[<p>官方文档：<a href="https://springdoc.cn/spring/web.html#mvc">Servlet 栈的 Web 应用 (springdoc.cn)</a></p>
<span id="more"></span>

<h2 id="SpringMVC三层架构"><a href="#SpringMVC三层架构" class="headerlink" title="SpringMVC三层架构"></a>SpringMVC三层架构</h2><p><code>Spring</code>是分为三层：表现层、业务层、数据层</p>
<p><code>SpringMVC</code>：服务于表现层，将表现层分为<code>controller</code>（控制层）、<code>model</code>（模型层）、<code>view</code>（视图层）</p>
<p>model层已有，需要自己写的是<code>controller</code>和模板引擎（<code>thymeleaf</code>）</p>
<h2 id="请求响应数据"><a href="#请求响应数据" class="headerlink" title="请求响应数据"></a>请求响应数据</h2><h3 id="1-响应String类型数据"><a href="#1-响应String类型数据" class="headerlink" title="1.响应String类型数据"></a>1.响应String类型数据</h3><p>将方法的返回值直接作为HTTP响应的内容返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只有GET方法能请求到</span></span><br><span class="line"><span class="comment">// /students?current=1&amp;limit=20</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/students&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStudents</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(name = &quot;current&quot;, required = false, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> current,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(name = &quot;limit&quot;, required = false, defaultValue = &quot;10&quot;)</span> <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">    System.out.println(current);</span><br><span class="line">    System.out.println(limit);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;some students&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /student/123, 获取参数的方式</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getStudent</span><span class="params">(<span class="meta">@PathVariable(name = &quot;id&quot;)</span><span class="type">int</span> id)</span> &#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a student&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/student&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveStudent</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-响应HTML数据"><a href="#2-响应HTML数据" class="headerlink" title="2. 响应HTML数据"></a>2. 响应HTML数据</h3><p>SpringMVC会根据视图解析器将逻辑视图名称解析成实际的视图文件路径，然后将模型中的数据渲染到该视图文件中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 响应HTML数据</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/teacher&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">getTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mav.addObject(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;gxy&quot;</span>);</span><br><span class="line">       mav.addObject(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;22&quot;</span>);</span><br><span class="line">       mav.setViewName(<span class="string">&quot;/demo/view&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mav;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 更为简洁的方法</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/school&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ouc&quot;</span>);</span><br><span class="line">       model.addAttribute(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;99&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/demo/view&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>视图文件使用<code>thymeleaf</code>模板引擎，用于在HTML页面上生成动态数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Teacher<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-响应JSON数据"><a href="#3-响应JSON数据" class="headerlink" title="3. 响应JSON数据"></a>3. 响应JSON数据</h3><p>一般用于异步请求中，异步请求通俗说就是不刷新页面，但访问了服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相应JSON数据（一般在异步请求中）</span></span><br><span class="line"><span class="comment">// 通过JSON字符串，JAVA对象可以转成JS对象</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/emp&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getEmp</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; emp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    emp.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;gxy&quot;</span>);</span><br><span class="line">    emp.put(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    emp.put(<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;15k&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> emp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/emps&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getEmps</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    Map&lt;String, Object&gt; emp = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    emp.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;gxy&quot;</span>);</span><br><span class="line">    emp.put(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    emp.put(<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;15k&quot;</span>);</span><br><span class="line">    list.add(emp);</span><br><span class="line"></span><br><span class="line">    emp.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hyy&quot;</span>);</span><br><span class="line">    emp.put(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>);</span><br><span class="line">    emp.put(<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;15k&quot;</span>);</span><br><span class="line">    list.add(emp);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-响应图片数据"><a href="#4-响应图片数据" class="headerlink" title="4. 响应图片数据"></a>4. 响应图片数据</h3><p>返回一个图片，示例为响应验证码图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/kaptcha&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getKaptcha</span><span class="params">(HttpServletResponse response, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> kaptchaProducer.createText();</span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> kaptchaProducer.createImage(text);</span><br><span class="line">    <span class="comment">// 将验证码返回给session</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;kaptcha&quot;</span>, text);</span><br><span class="line">    <span class="comment">// 设置响应类型</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    <span class="comment">// 将图片输出给浏览器(将生成的图片写入响应数据流)</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;png&quot;</span>, os);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;响应验证码失败&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>newcoder项目前置知识之Mybatis</title>
    <url>/2024/05/10/newcoder%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E4%B9%8BMybatis/</url>
    <content><![CDATA[<p>官方文档<a href="https://mybatis.org/spring/">mybatis-spring</a></p>
<span id="more"></span>

<h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>负责创建SqlSession对象</p>
<h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>用于与数据库进行交互。它提供了各种方法来执行SQL语句、获取Mapper接口的实例以及管理事务</p>
<h3 id="XML配置文件"><a href="#XML配置文件" class="headerlink" title="XML配置文件"></a>XML配置文件</h3><p><code>mybatis</code>底层配置</p>
<p> <code>application.properties</code>配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DataSourceProperties，统一管理连接，反复使用，管理连接池</span></span><br><span class="line"><span class="comment"># 数据库驱动</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/community?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=HongKong</span></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 连接池</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="comment"># 连接池最大连接数</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.maximum-pool-size</span>=<span class="string">15</span></span><br><span class="line"><span class="comment"># 连接池最小空闲连接</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.minimum-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 连接池等多久把空闲的关掉</span></span><br><span class="line"><span class="attr">spring.datasource.hikari.idle-timeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># MybatisProperties</span></span><br><span class="line"><span class="comment"># 映射文件存放位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment"># 实体类所在包名，封装某个表的数据</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.newcoder.community.entity</span></span><br><span class="line"><span class="comment"># 启动id自增长</span></span><br><span class="line"><span class="attr">mybatis.configuration.use-generated-keys</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 表的字段不区分大小写，属性名是驼峰命令，这个属性让表的字段和属性相匹配</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<h3 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h3><p>定义数据访问操作的接口，通常对应于数据库中的一个表或一个实体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectId</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    User <span class="title function_">selectByName</span><span class="params">(String username)</span>;</span><br><span class="line">    User <span class="title function_">selectByEmail</span><span class="params">(String email)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateStatus</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> status)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateHeader</span><span class="params">(<span class="type">int</span> id, String headUrl)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updatePassword</span><span class="params">(<span class="type">int</span> id, String password)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Mapper映射器"><a href="#Mapper映射器" class="headerlink" title="Mapper映射器"></a>Mapper映射器</h3><p>用于将Mapper接口中的方法与对应的SQL语句进行映射，可以用XML也可以用注解写。</p>
<p>对<code>UserMapper</code>中每一个方法都要写一个标签对应，很容易写错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.newcoder.community.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectField&quot;</span>&gt;</span></span><br><span class="line">        id, username, password, salt, email, type, status, activation_code, header_url, create_time</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;insertFile&quot;</span>&gt;</span></span><br><span class="line">        username, password, salt, email, type, status, activation_code, header_url, create_time</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectField&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectField&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from user</span><br><span class="line">        where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByEmail&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectField&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from user</span><br><span class="line">        where email = #&#123;email&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>  <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into user (<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;insertFile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>)</span><br><span class="line">        value (#&#123;username&#125;, #&#123;password&#125;, #&#123;salt&#125;, #&#123;email&#125;, #&#123;type&#125;, #&#123;status&#125;, #&#123;activationCode&#125;, #&#123;headerUrl&#125;,</span><br><span class="line">        #&#123;createTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStatus&quot;</span>&gt;</span></span><br><span class="line">        update user set status = #&#123;status&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateHeader&quot;</span>&gt;</span></span><br><span class="line">        update user set header_url = #&#123;headerUrl&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePassword&quot;</span>&gt;</span></span><br><span class="line">        update user set password = #&#123;password&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByName&quot;</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from user</span><br><span class="line">        where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Mybatis的注解"><a href="#Mybatis的注解" class="headerlink" title="Mybatis的注解"></a><code>Mybatis</code>的注解</h2><h3 id="Param注解"><a href="#Param注解" class="headerlink" title="@Param注解"></a><code>@Param</code>注解</h3><p>用于解决方法参数与SQL语句中的参数对应关系不明确的情况，给参数名起别名</p>
<p><code>XML</code>文件中使用动态SQL，要拼接SQL语句时，参数中一定要用<code>@Param</code>注解</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="1-连不上数据库"><a href="#1-连不上数据库" class="headerlink" title="1. 连不上数据库"></a>1. 连不上数据库</h3><p>报错:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="line"><span class="comment">### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)</span></span><br><span class="line"><span class="comment">### The error may exist in file [D:\learning\projects\newcoder\community\target\classes\mapper\user-mapper.xml]</span></span><br><span class="line"><span class="comment">### The error may involve com.newcoder.community.dao.UserMapper.selectById</span></span><br><span class="line"><span class="comment">### The error occurred while executing a query</span></span><br><span class="line"><span class="comment">### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is java.sql.SQLException: Access denied for user &#x27;root&#x27;@&#x27;localhost&#x27; (using password: YES)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可能的原因：</p>
<ol>
<li>用户名，密码写错</li>
<li>查询数据库的语句写错</li>
<li>数据库的连接地址不对</li>
</ol>
<p>我的问题是，查询语句中的属性名写错了。</p>
<p>在mapper文件中表名爆红，不会报错。</p>
<p>为了便于调试可以把日志级别在配置里改为<code>debug</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># logger</span></span><br><span class="line"><span class="attr">logging.level.com.newcoder.community</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目运行显示端口占用问题</title>
    <url>/2024/05/19/SpringBoot%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E6%98%BE%E7%A4%BA%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Web server failed to start. Port 8080 was already <span class="keyword">in</span> use.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Identify and stop the process that<span class="string">&#x27;s listening on port 8080 or configure this application to listen on another port.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Process finished with exit code 0</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>查询端口信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr :8080</span><br><span class="line"> TCP    10.149.0.108:5640      49.7.253.65:8080       ESTABLISHED     27564</span><br></pre></td></tr></table></figure>

<p>杀死端口：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskkill /pid 27564 /f</span><br></pre></td></tr></table></figure>

<p>但杀死的端口时qq的，8080端口没有占用后，程序还是报同样的错误</p>
<p>配置文件中换成8081端口后，不报错，但关闭IDEA，又打开后，运行程序显示8081端口被占用。</p>
<p>没找到解决办法，最后重启解决。。。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot问题</tag>
      </tags>
  </entry>
  <entry>
    <title>学习小土堆pytorch教程记录-环境配置</title>
    <url>/2024/07/31/%E5%AD%A6%E4%B9%A0%E5%B0%8F%E5%9C%9F%E5%A0%86pytorch%E6%95%99%E7%A8%8B%E8%AE%B0%E5%BD%95-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>好久没更了，破事太多了，论坛项目也得先放一放了，先入门pytorch吧，9小时争取尽快学完！</p>
<span id="more"></span>

<h1 id="1-安装anaconda3"><a href="#1-安装anaconda3" class="headerlink" title="1. 安装anaconda3"></a>1. 安装anaconda3</h1><p>anaconda：是包管理和环境管理工具。<br>官网：<a href="https://www.anaconda.com/download#">Download Anaconda Distribution | Anaconda</a><br>镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">Index of &#x2F;anaconda&#x2F;archive&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br>根据系统下载适合的版本：<br>下载了Anaconda3-2023.09-0-Windows-x86_64版本<br>一直点击下一步。<br>安装完后能打开Anaconda Prompt</p>
<h1 id="2-安装显卡驱动"><a href="#2-安装显卡驱动" class="headerlink" title="2. 安装显卡驱动"></a>2. 安装显卡驱动</h1><p>在任务管理器中GPU内，能看到显卡名即安装了驱动。</p>
<h1 id="3-安装一个环境"><a href="#3-安装一个环境" class="headerlink" title="3. 安装一个环境"></a>3. 安装一个环境</h1><p><strong>更改安装的环境位置：</strong><br>找到.condarc这个文件，加上一个配置，这样就会安装到anaconda的envs下了。更改路径后要给D盘的anaconda文件夹增加权限，所有用户都可读写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">envs_dirs:</span><br><span class="line">  - D:\anaconda\envs</span><br><span class="line">pkgs_dirs:</span><br><span class="line">  - D:\anaconda\pkgs</span><br></pre></td></tr></table></figure>

<p>打开Anaconda Prompt<br>输入：conda create -n pytorch python&#x3D;3.8<br>激活环境：conda activate pytorch</p>
<h1 id="4-安装pytorch"><a href="#4-安装pytorch" class="headerlink" title="4. 安装pytorch"></a>4. 安装pytorch</h1><p>pytorch官网：<a href="https://pytorch.org/">PyTorch</a><br>根据是否有GPU选择不同的版本：</p>
<h2 id="有GPU"><a href="#有GPU" class="headerlink" title="有GPU"></a>有GPU</h2><p>![Pasted image 20240731163620](C:\Users\ouccs\OneDrive - stu.ouc.edu.cn\BlogsFile\source_posts\assets\Pasted image 20240731163620.png)<br>pip3 install torch torchvision torchaudio –index-url <a href="https://download.pytorch.org/whl/cu118">https://download.pytorch.org/whl/cu118</a></p>
<h2 id="无GPU"><a href="#无GPU" class="headerlink" title="无GPU"></a>无GPU</h2><p>![Pasted image 20240731163607](C:\Users\ouccs\OneDrive - stu.ouc.edu.cn\BlogsFile\source_posts\assets\Pasted image 20240731163607.png)<br>pip3 install torch torchvision torchaudio</p>
<p>验证pytorch是否安装成功：<br>![Pasted image 20240731164607](C:\Users\ouccs\OneDrive - stu.ouc.edu.cn\BlogsFile\source_posts\assets\Pasted image 20240731164607.png)</p>
<h1 id="5-配置jupyter程序"><a href="#5-配置jupyter程序" class="headerlink" title="5. 配置jupyter程序"></a>5. 配置jupyter程序</h1><p>jupyter是可交互的python编程<br>安装必要的包：conda install nb_conda<br>启动jupyter：jupyter notebook<br>启动后会在浏览器中运行jupyter</p>
<h1 id="6-vscode配置anaconda环境"><a href="#6-vscode配置anaconda环境" class="headerlink" title="6. vscode配置anaconda环境"></a>6. vscode配置anaconda环境</h1><p><strong>需要安装的插件：</strong> python、coder_runner<br>ctrl+shift+p打开后输入python select interpreter<br>find选择anaconda下的一个python.exe</p>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>深度学习 pytorch</tag>
      </tags>
  </entry>
</search>
